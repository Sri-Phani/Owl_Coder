5/1/2024
Count possible ways to construct buildings

	#define mod 1000000007 
	int TotalWays(int N)
	{
	    // Code here
	    //if(N==1) return 4;
	    long long a=1,b=1,c=a+b;
	    for(int i=2;i<=N;i++)
	    {
	        a=b;//1
	        b=c;//2
	        c=(a+b)%mod;
	    }
	    return (c*c)%mod;
	    
	    
	}

--------------------

1.And queries
----------------------------------------
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int main(){
    int n;
    cin>>n;
    vector<int>arr(n,0);
    vector<vector<int>> pre(n+1,vector<int>(32,0));
    for(int i=0;i<n;i++) cin>>arr[i];
    for(int i=0;i<32;i++){
        for(int j=1;j<=n;j++){
            if(arr[j-1] & (1<<i)){
                pre[j][i]=pre[j-1][i]+1;
            }
            else pre[j][i]=pre[j-1][i];
        }
    }
    // for(int j=0;j<=n;j++){
    //     for(int i=31;i>=0;i--){
    //         cout<<pre[j][i]<<" ";
    //     }
    //     cout<<endl;
    // }
    int q;
    cin>>q;
    while(q--){
        int l,r;
        cin>>l>>r;
        l=l+1;
        r=r+1;
        int ans=0;
        for(int i=31;i>=0;i--){
            if(abs(pre[l-1][i]-pre[r][i]) == (r-l+1)){
                ans=ans+(1<<(i));
            }
        }
        cout<<ans<<endl;
    }
}

-------------------------
Sum of All Subset XOR Totals

  int n=nums.size();
        int total=0;
        for(int num=0;num<(1<<n);num++)
        {
            int Xor=0; vector<int>v;
        int n=nums.size();
        v.push_back(nums[0]);
        int len=1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]>v.back()){
                v.push_back(nums[i]);
                len++;
            }
            else
            {
                int ind=lower_bound(v.begin(),v.end(),nums[i])-v.begin();
                v[ind]=nums[i];
            }
        }
        return len;

--------------------------------
            for(int bit=0;bit<n;bit++)
            {
                 if(num&(1<<bit)){
                    Xor^=nums[bit];                     
                 }
            }
            total+=Xor;
        }
        return total;
        
-------------------------
Longest Increasing Subsequence

